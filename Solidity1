//SPDX-License-Identifier: MIT;

pragma solidity ^0.8.0;
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

// contract SimpleToken {
//     address owner;
//     mapping (address => uint256) public accounts;
    
//     constructor (uint256 initialSupply) public {
//         owner = msg.sender;
//         accounts[owner] = initialSupply;
//     } 
    
//     function transfer (address to, uint256 value) public {
//         require(accounts[msg.sender] >= value);
//         require(accounts[to] + value >= accounts[to]);
//         accounts[msg.sender] -= value;
//         accounts[to] += value;
//     }
    
//     function getBalance (uint, address) view public returns(uint){
//         return address(owner).balance;
//     }
    
//     function getTokenSupply () view public returns (uint){
        
//     }}
    library SafeMath {  

contract Bank {
 
    struct Account {address addr; uint amount;}
    Account public TomideAccount = Account({addr: 0x5B38Da6a701c568545dCfcB03FcB875f56beddC4, amount: 50 });
    Account public AshoreAccount = Account({addr: 0xAb8483F64d9C6d1EcF9b849Ae677dD3315835cb2, amount: 100});
    modifier onlyOwner { require(msg.sender == TomideAccount.addr); _;}
    
    function depositAmount (uint _addMoney) public onlyOwner {TomideAccount.amount +=  _addMoney;}
    function witdrawAmount (uint _withdrawalAmount) public onlyOwner {TomideAccount.amount -= _withdrawalAmount;}
    function transferAmount (uint _transferAmount) public onlyOwner {
        TomideAccount.amount -= _transferAmount; AshoreAccount.amount += _transferAmount; }}
}

// Require testing-----------------------------------------------
// contract Bank{
//     mapping (address => uint) public accounts;
//     function deposit() public payable {
//         require (accounts[msg.sender] + msg.value >= accounts[msg.sender], "overflow error");
//         accounts[msg.sender] += msg.value;
//     }
    
//     function withdraw (uint money) public {
//         require (money <= accounts[msg.sender]);
//         accounts[msg.sender] -= money;
//     }
// }

// Revert  testing (Abort execution and Revert state changes)------------------------------------------------
// contract Bank {
//     mapping(address => uint) public accounts;
    
//     function deposit() public payable {
//         if (accounts[msg.sender] + msg.value >= accounts[msg.sender]){revert("overflow error");}
//         accounts[msg.sender] += money;}
    
//     function withdraw(uint money) public {
//         if (money > accounts[msg.sender]){revert()}
//         account[msg.sender] -= money;
//     }
// }


// Assert testing  ------------------------------------------------
// contract Math {
//     function add (uint256 a, uint256 b) internal pure returns (uint256){
//       uint256 c = a + b; assert(c >= a); return c;}
       
//     function multiply (uint256 a, uint256 b) internal pure returns (uint256){
//         if (a == 0) {return 0;}
//         uint256 c = a * b; assert(c/a == b); return c;}}

// Modifier----------------------------------------------------------
 
//  contract Owned {
//     constructor() public {owner = msg.sender;}
//     address owner;
//     modifer onlyOwner {require(msg.sender == owner); _;}}
//     contract mortal is owned {function close() public onlyOwner {selfdestruct(owner)}}

// Libraries -------------------------------------------------------------------------------------------------------------------------------

// library SafeMath {
//   function mul(uint256 a, uint256 b) internal pure returns (uint256) {
//     uint256 c = a * b;
//     assert(a == 0 || c / a == b);
//     return c;
//   }
 
//   function div(uint256 a, uint256 b) internal pure returns (uint256) {
//     // assert(b > 0); // Solidity automatically throws when dividing by 0
//     uint256 c = a / b;
//     // assert(a == b * c + a % b); // There is no case in which this doesn't hold
//     return c;
//   }
 
//   function sub(uint256 a, uint256 b) internal pure returns (uint256) {
//     assert(b <= a);
//     return a - b;
//   }
 
//   function add(uint256 a, uint256 b) internal pure returns (uint256) {
//     uint256 c = a + b;
//     assert(c >= a);
//     return c;
//   }
// }


// import "github.com/OpenZeppelin/zeppelin-solidity/contracts/math/Math.sol";
// contract Bank2 {
//     mapping (address => uint) public accounts;
//     using SafeMath for uint256;
    
//     function deposit() public payable {
//         require(accounts[msg.sender] + msg.value >= accounts[msg.sender], "overflow error");
//         accounts[msg.sender] = accounts[msg.sender].add(msg.value);}
        
//     function withdrawal() public payable {
//         require(money <= accounts[msg.sender]);
//         accounts[msg.sender] = accounts[msg.seder].sub(money);
//     }    
// }

